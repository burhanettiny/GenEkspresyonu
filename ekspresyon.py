import streamlit as st 
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import scipy.stats as stats
from io import BytesIO
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

# BaÅŸlÄ±k
st.title("ğŸ§¬ Gen Ekspresyon Analizi UygulamasÄ±")
st.markdown("### B. YalÃ§Ä±nkaya tarafÄ±ndan geliÅŸtirildi")

# KullanÄ±cÄ±dan giriÅŸ al
st.header("ğŸ“Š Hasta ve Kontrol Grubu Verisi Girin")

# Hedef Gen ve Hasta Grubu SayÄ±sÄ±
num_target_genes = st.number_input("ğŸ”¹ Hedef Gen SayÄ±sÄ±nÄ± Girin", min_value=1, step=1)
num_patient_groups = st.number_input("ğŸ”¹ Hasta Grubu SayÄ±sÄ±nÄ± Girin", min_value=1, step=1)

# Veri listeleri
input_values_table = []
data = []
stats_data = []
sample_counter = 1  # Ã–rnek numaralandÄ±rmasÄ± iÃ§in sayaÃ§

def parse_input_data(input_data):
    values = [x.replace(",", ".").strip() for x in input_data.split() if x.strip()]
    return np.array([float(x) for x in values if x])

# PDF OluÅŸturma Fonksiyonu
def create_pdf(results, stats, input_df):
    buffer = BytesIO()
    c = canvas.Canvas(buffer, pagesize=letter)
    width, height = letter

    c.setFont("Helvetica-Bold", 14)
    c.drawString(50, height - 50, "Gen Ekspresyon Analizi Raporu")

    c.setFont("Helvetica", 12)
    c.drawString(50, height - 80, "SonuÃ§lar:")
    
    y_position = height - 100
    for result in results:
        text = f"{result['Hedef Gen']} - {result['Hasta Grubu']} | Î”Î”Ct: {result['Î”Î”Ct']:.2f} | 2^(-Î”Î”Ct): {result['Gen Ekspresyon DeÄŸiÅŸimi (2^(-Î”Î”Ct))']:.2f}"
        c.drawString(50, y_position, text)
        y_position -= 20
        if y_position < 50:
            c.showPage()
            y_position = height - 50

    c.setFont("Helvetica-Bold", 12)
    c.drawString(50, y_position - 30, "Ä°statistiksel SonuÃ§lar:")

    y_position -= 50
    for stat in stats:
        text = f"{stat['Hedef Gen']} - {stat['Hasta Grubu']} | Test: {stat['KullanÄ±lan Test']} | p-deÄŸeri: {stat['Test P-deÄŸeri']:.4f} | {stat['AnlamlÄ±lÄ±k']}"
        c.drawString(50, y_position, text)
        y_position -= 20
        if y_position < 50:
            c.showPage()
            y_position = height - 50
    
    c.setFont("Helvetica-Bold", 12)
    c.drawString(50, y_position - 30, "GiriÅŸ Verileri Tablosu:")
    
    y_position -= 50
    input_data_str = input_df.to_string(index=False)
    for line in input_data_str.split("\n"):
        c.drawString(50, y_position, line)
        y_position -= 15
        if y_position < 50:
            c.showPage()
            y_position = height - 50

    c.save()
    buffer.seek(0)
    return buffer

# PDF Raporu Ä°ndir Butonu
if st.button("ğŸ“¥ PDF Raporu Ä°ndir"):
    if input_values_table:
        pdf_buffer = create_pdf(data, stats_data, pd.DataFrame(input_values_table))
        st.download_button(label="PDF Olarak Ä°ndir", data=pdf_buffer, file_name="gen_ekspresyon_raporu.pdf", mime="application/pdf")
    else:
        st.error("PDF raporu oluÅŸturmak iÃ§in yeterli veri yok.")
